package be.vds.wizard;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

/**
 * This class implements a basic wizard dialog, where the programmer can insert
 * one or more Components to act as panels. These panels can be navigated
 * through arbitrarily using the 'Next' or 'Back' buttons, or the dialog itself
 * can be closed using the 'Cancel' button. Note that even though the dialog
 * uses a CardLayout manager, the order of the panels is not linear. Each panel
 * determines at runtime what its next and previous panel will be.
 */
public class Wizard extends WindowAdapter implements PropertyChangeListener {

	/**
	 * Indicates that the 'Finish' button was pressed to close the dialog.
	 */
	public static final int FINISH_RETURN_CODE = 0;
	/**
	 * Indicates that the 'Cancel' button was pressed to close the dialog, or
	 * the user pressed the close box in the corner of the window.
	 */
	public static final int CANCEL_RETURN_CODE = 1;
	/**
	 * Indicates that the dialog closed due to an internal error.
	 */
	public static final int ERROR_RETURN_CODE = 2;

	/**
	 * The String-based action command for the 'Next' button.
	 */
	public static final String NEXT_BUTTON_ACTION_COMMAND = "NextButtonActionCommand";
	/**
	 * The String-based action command for the 'Back' button.
	 */
	public static final String BACK_BUTTON_ACTION_COMMAND = "BackButtonActionCommand";
	/**
	 * The String-based action command for the 'Cancel' button.
	 */
	public static final String CANCEL_BUTTON_ACTION_COMMAND = "CancelButtonActionCommand";
	private static final Border PATH_BORDER = BorderFactory.createEmptyBorder(
			2, 5, 2, 5);

	// The i18n text used for the buttons. Loaded from a property resource file.

	private static String backText = "back";
	private static String nextText = "next";
	private static String finishText = "finish";
	private static String cancelText = "cancel";

	// The image icons used for the buttons. Filenames are loaded from a
	// property resource file.

	static Icon BACK_ICON;
	static Icon NEXT_ICON;
	static Icon FINISH_ICON;
	static Icon CANCEL_ICON;

	private WizardModel wizardModel;
	private WizardController wizardController;
	private JDialog wizardDialog;

	private JPanel cardPanel;
	private CardLayout cardLayout;
	private JButton backButton;
	private JButton nextButton;
	private JButton cancelButton;

	private int returnCode;
	private boolean wizardCentered;
	private boolean wizardResizable;
	private List<WizardPanelDescriptor> paths = new ArrayList<WizardPanelDescriptor>();
	private JPanel pathLabelPanel;
	private int wizardPathWidth = 130;

	/**
	 * Default constructor. This method creates a new WizardModel object and
	 * passes it into the overloaded constructor.
	 */
	public Wizard() {
		this((Frame) null);
	}

	/**
	 * This method accepts a java.awt.Dialog object as the javax.swing.JDialog's
	 * parent.
	 * 
	 * @param owner
	 *            The java.awt.Dialog object that is the owner of this dialog.
	 */
	public Wizard(Dialog owner) {
		wizardModel = new WizardModel();
		wizardDialog = new JDialog(owner);
		initComponents();
	}

	/**
	 * This method accepts a java.awt.Frame object as the javax.swing.JDialog's
	 * parent.
	 * 
	 * @param owner
	 *            The java.awt.Frame object that is the owner of the
	 *            javax.swing.JDialog.
	 */
	public Wizard(Frame owner) {
		wizardModel = new WizardModel();
		wizardDialog = new JDialog(owner);
		initComponents();
	}

	/**
	 * Returns an instance of the JDialog that this class created. This is
	 * useful in the event that you want to change any of the JDialog parameters
	 * manually.
	 * 
	 * @return The JDialog instance that this class created.
	 */
	public JDialog getDialog() {
		return wizardDialog;
	}

	/**
	 * Returns the owner of the generated javax.swing.JDialog.
	 * 
	 * @return The owner (java.awt.Frame or java.awt.Dialog) of the
	 *         javax.swing.JDialog generated by this class.
	 */
	public Component getOwner() {
		return wizardDialog.getOwner();
	}

	/**
	 * Sets the title of the generated javax.swing.JDialog.
	 * 
	 * @param s
	 *            The title of the dialog.
	 */
	public void setTitle(String s) {
		wizardDialog.setTitle(s);
	}

	/**
	 * Returns the current title of the generated dialog.
	 * 
	 * @return The String-based title of the generated dialog.
	 */
	public String getTitle() {
		return wizardDialog.getTitle();
	}

	/**
	 * Sets the modality of the generated javax.swing.JDialog.
	 * 
	 * @param b
	 *            the modality of the dialog
	 */
	public void setModal(boolean b) {
		wizardDialog.setModal(b);
	}

	/**
	 * Returns the modality of the dialog.
	 * 
	 * @return A boolean indicating whether or not the generated
	 *         javax.swing.JDialog is modal.
	 */
	public boolean isModal() {
		return wizardDialog.isModal();
	}

	/**
	 * Convienence method that displays a modal wizard dialog and blocks until
	 * the dialog has completed.
	 * 
	 * 
	 * @return Indicates how the dialog was closed. Compare this value against
	 *         the RETURN_CODE constants at the beginning of the class.
	 */
	public int showModalDialog() {

		wizardDialog.setModal(true);
		if (wizardDialog.getWidth() <= 0 && wizardDialog.getHeight() <= 0)
			wizardDialog.pack();

		wizardDialog.setResizable(wizardResizable);

		if (wizardCentered)
			wizardDialog.setLocationRelativeTo(null);

		wizardDialog.setVisible(true);

		return returnCode;
	}

	/**
	 * Returns the current model of the wizard dialog.
	 * 
	 * @return A WizardModel instance, which serves as the model for the wizard
	 *         dialog.
	 */
	public WizardModel getModel() {
		return wizardModel;
	}

	/**
	 * Add a Component as a panel for the wizard dialog by registering its
	 * WizardPanelDescriptor object. Each panel is identified by a unique
	 * Object-based identifier (often a String), which can be used by the
	 * setCurrentPanel() method to display the panel at runtime.
	 * 
	 * @param id
	 *            An Object-based identifier used to identify the
	 *            WizardPanelDescriptor object.
	 * @param panel
	 *            The WizardPanelDescriptor object which contains helpful
	 *            information about the panel.
	 */
	public void registerWizardPanel(Object id, WizardPanelDescriptor panel) {

		// Add the incoming panel to our JPanel display that is managed by
		// the CardLayout layout manager.

		cardPanel.add(panel.getPanelComponent(), id);

		// Set a callback to the current wizard.

		panel.setWizard(this);

		// Place a reference to it in the model.

		wizardModel.registerPanel(id, panel);

	}

	/**
	 * Displays the panel identified by the object passed in. This is the same
	 * Object-based identified used when registering the panel.
	 * 
	 * @param id
	 *            The Object-based identifier of the panel to be displayed.
	 */
	public void setCurrentPanel(Object id) {

		// Get the hashtable reference to the panel that should
		// be displayed. If the identifier passed in is null, then close
		// the dialog.

		if (id == null)
			close(ERROR_RETURN_CODE);

		WizardPanelDescriptor oldPanelDescriptor = wizardModel
				.getCurrentPanelDescriptor();
		if (oldPanelDescriptor != null)
			oldPanelDescriptor.aboutToHidePanel();

		wizardModel.setCurrentPanel(id);
		wizardModel.getCurrentPanelDescriptor().aboutToDisplayPanel();

		// Show the panel in the dialog.

		cardLayout.show(cardPanel, id.toString());
		WizardPanelDescriptor descriptor = wizardModel
				.getCurrentPanelDescriptor();

		int i = paths.indexOf(descriptor);
		if (i == -1) {
			paths.add(descriptor);
		} else {
			while (paths.size() > i + 1) {
				paths.remove(paths.size() - 1);
			}
		}
		displayPaths();

		descriptor.displayingPanel();

	}

	private void displayPaths() {
		pathLabelPanel.removeAll();
		short i = 1;
		for (WizardPanelDescriptor wpd : paths) {
			JLabel label = new JLabel();
			label.setText(String.valueOf(i) + ". " + wpd.getPanelDescrition());
			label.setBorder(PATH_BORDER);
			label.setForeground(Color.WHITE);
			pathLabelPanel.add(label);
			i++;
		}
		wizardDialog.repaint();
		wizardDialog.getContentPane().validate();
	}

	/**
	 * Method used to listen for property change events from the model and
	 * update the dialog's graphical components as necessary.
	 * 
	 * @param evt
	 *            PropertyChangeEvent passed from the model to signal that one
	 *            of its properties has changed value.
	 */
	public void propertyChange(PropertyChangeEvent evt) {

		if (evt.getPropertyName().equals(
				WizardModel.CURRENT_PANEL_DESCRIPTOR_PROPERTY)) {
			wizardController.resetButtonsToPanelRules();
		} else if (evt.getPropertyName().equals(
				WizardModel.NEXT_FINISH_BUTTON_TEXT_PROPERTY)) {
			nextButton.setText(evt.getNewValue().toString());
		} else if (evt.getPropertyName().equals(
				WizardModel.BACK_BUTTON_TEXT_PROPERTY)) {
			backButton.setText(evt.getNewValue().toString());
		} else if (evt.getPropertyName().equals(
				WizardModel.CANCEL_BUTTON_TEXT_PROPERTY)) {
			cancelButton.setText(evt.getNewValue().toString());
		} else if (evt.getPropertyName().equals(
				WizardModel.NEXT_FINISH_BUTTON_ENABLED_PROPERTY)) {
			nextButton.setEnabled(((Boolean) evt.getNewValue()).booleanValue());
		} else if (evt.getPropertyName().equals(
				WizardModel.BACK_BUTTON_ENABLED_PROPERTY)) {
			backButton.setEnabled(((Boolean) evt.getNewValue()).booleanValue());
		} else if (evt.getPropertyName().equals(
				WizardModel.CANCEL_BUTTON_ENABLED_PROPERTY)) {
			cancelButton.setEnabled(((Boolean) evt.getNewValue())
					.booleanValue());
		} else if (evt.getPropertyName().equals(
				WizardModel.NEXT_FINISH_BUTTON_ICON_PROPERTY)) {
			nextButton.setIcon((Icon) evt.getNewValue());
		} else if (evt.getPropertyName().equals(
				WizardModel.BACK_BUTTON_ICON_PROPERTY)) {
			backButton.setIcon((Icon) evt.getNewValue());
		} else if (evt.getPropertyName().equals(
				WizardModel.CANCEL_BUTTON_ICON_PROPERTY)) {
			cancelButton.setIcon((Icon) evt.getNewValue());
		}

	}

	/**
	 * Retrieves the last return code set by the dialog.
	 * 
	 * @return An integer that identifies how the dialog was closed. See the
	 *         *_RETURN_CODE constants of this class for possible values.
	 */
	public int getReturnCode() {
		return returnCode;
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @return A boolean indicating if the button is enabled.
	 */
	public boolean getBackButtonEnabled() {
		return wizardModel.getBackButtonEnabled().booleanValue();
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @param boolean newValue The new enabled status of the button.
	 */
	public void setBackButtonEnabled(boolean newValue) {
		wizardModel.setBackButtonEnabled(new Boolean(newValue));
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @return A boolean indicating if the button is enabled.
	 */
	public boolean getNextFinishButtonEnabled() {
		return wizardModel.getNextFinishButtonEnabled().booleanValue();
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @param boolean newValue The new enabled status of the button.
	 */
	public void setNextFinishButtonEnabled(boolean newValue) {
		wizardModel.setNextFinishButtonEnabled(new Boolean(newValue));
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @return A boolean indicating if the button is enabled.
	 */
	public boolean getCancelButtonEnabled() {
		return wizardModel.getCancelButtonEnabled().booleanValue();
	}

	/**
	 * Mirrors the WizardModel method of the same name.
	 * 
	 * @param boolean newValue The new enabled status of the button.
	 */
	public void setCancelButtonEnabled(boolean newValue) {
		wizardModel.setCancelButtonEnabled(new Boolean(newValue));
	}

	/**
	 * Closes the dialog and sets the return code to the integer parameter.
	 * 
	 * @param code
	 *            The return code.
	 */
	void close(int code) {
		returnCode = code;
		wizardDialog.dispose();
	}

	/**
	 * This method initializes the components for the wizard dialog: it creates
	 * a JDialog as a CardLayout panel surrounded by a small amount of space on
	 * each side, as well as three buttons at the bottom.
	 */

	private void initComponents() {
		wizardModel.addPropertyChangeListener(this);
		wizardController = new WizardController(this);

		wizardDialog.getContentPane().setLayout(new BorderLayout());
		wizardDialog.addWindowListener(this);

		// Create the outer wizard panel, which is responsible for three
		// buttons:
		// Next, Back, and Cancel. It is also responsible a JPanel above them
		// that
		// uses a CardLayout layout manager to display multiple panels in the
		// same spot.

		JPanel buttonPanel = new JPanel();
		JSeparator separator = new JSeparator();
		Box buttonBox = new Box(BoxLayout.X_AXIS);

		cardPanel = new JPanel();
		cardPanel.setBorder(new EmptyBorder(new Insets(5, 10, 5, 10)));

		cardLayout = new CardLayout();
		cardPanel.setLayout(cardLayout);

		backButton = new JButton();
		nextButton = new JButton();
		cancelButton = new JButton();

		backButton.setActionCommand(BACK_BUTTON_ACTION_COMMAND);
		nextButton.setActionCommand(NEXT_BUTTON_ACTION_COMMAND);
		cancelButton.setActionCommand(CANCEL_BUTTON_ACTION_COMMAND);

		backButton.addActionListener(wizardController);
		nextButton.addActionListener(wizardController);
		cancelButton.addActionListener(wizardController);

		// Create the buttons with a separator above them, then place them
		// on the east side of the panel with a small amount of space between
		// the back and the next button, and a larger amount of space between
		// the next button and the cancel button.

		buttonPanel.setLayout(new BorderLayout());
		buttonPanel.add(separator, BorderLayout.NORTH);

		buttonBox.setBorder(new EmptyBorder(new Insets(5, 10, 5, 10)));
		buttonBox.add(backButton);
		buttonBox.add(Box.createHorizontalStrut(10));
		buttonBox.add(nextButton);
		buttonBox.add(Box.createHorizontalStrut(30));
		buttonBox.add(cancelButton);

		buttonPanel.add(buttonBox, BorderLayout.EAST);

		wizardDialog.getContentPane().add(createPathPanel(), BorderLayout.WEST);
		wizardDialog.getContentPane().add(buttonPanel, BorderLayout.SOUTH);
		wizardDialog.getContentPane().add(cardPanel, BorderLayout.CENTER);

	}

	private Component createPathPanel() {
		pathLabelPanel = new CircleBackgroundedPanel();
		pathLabelPanel.setBorder(new LineBorder(Color.DARK_GRAY, 2));
		pathLabelPanel.setOpaque(false);
		pathLabelPanel.setLayout(new BoxLayout(pathLabelPanel,
				BoxLayout.PAGE_AXIS));

		JPanel p = new JPanel(new BorderLayout());
		p.setOpaque(false);
		p.add(pathLabelPanel);
		p.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		
//		p.setMinimumSize(new Dimension(300, 0));
//		p.setMaximumSize(new Dimension(300, 0));
		p.setPreferredSize(new Dimension(wizardPathWidth , 0));
		return p;
	}

	public void setDefaultIcons() {
		BACK_ICON = new ImageIcon(this.getClass().getClassLoader()
				.getResource("images/back16.png"));
		NEXT_ICON = new ImageIcon(this.getClass().getClassLoader()
				.getResource("images/forward16.png"));
		CANCEL_ICON = new ImageIcon(this.getClass().getClassLoader()
				.getResource("images/cancel16.png"));
		 FINISH_ICON = new ImageIcon(this.getClass().getClassLoader()
		 .getResource("images/finish16.png"));
	}

	public void setBackIcon(ImageIcon icon) {
		BACK_ICON = icon;
	}

	public void setNextIcon(ImageIcon icon) {
		NEXT_ICON = icon;
	}

	public void setFinishIcon(ImageIcon icon) {
		FINISH_ICON = icon;
	}

	public void setCancelIcon(ImageIcon icon) {
		CANCEL_ICON = icon;
	}

	/**
	 * If the user presses the close box on the dialog's window, treat it as a
	 * cancel.
	 * 
	 * @param WindowEvent
	 *            The event passed in from AWT.
	 */

	public void windowClosing(WindowEvent e) {
		returnCode = CANCEL_RETURN_CODE;
	}

	public void setBackText(String text) {
		backText = text;
	}

	public static String getBackText() {
		return backText;
	}

	public void setNextText(String text) {
		nextText = text;
	}

	public static String getNextText() {
		return nextText;
	}

	public void setCancelText(String text) {
		cancelText = text;
	}

	public static String getCancelText() {
		return cancelText;
	}

	public void setFinishText(String text) {
		finishText = text;
	}

	public static String getFinishText() {
		return finishText;
	}

	public void setWizardSize(int width, int height) {
		wizardDialog.setSize(width, height);
	}

	public void setWizardCentered(boolean wizardCentered) {
		this.wizardCentered = wizardCentered;
	}

	public void setWizardResizable(boolean wizardResizable) {
		this.wizardResizable = wizardResizable;
	}
	
	public void setWizardPathWidth(int width) {
		this.wizardPathWidth = width;
	}

}
